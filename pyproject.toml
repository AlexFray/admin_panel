[tool.poetry]
name = "admin-panel"
version = "0.1.0"
description = "Задание первого спринта"
authors = ["Aleksey Erofeev <erofeev777555@gmail.com>"]
readme = "README.md"
packages = [{include = "admin_panel"}]

[tool.poetry.dependencies]
python = "^3.10"
Django = "4.2.5"
ruff = "0.1.3"
python-dotenv = "1.0.0"
psycopg2-binary = "2.9"
django-split-settings = "1.2.0"
django-debug-toolbar = "4.3.0"
uWSGI = "2.0.24"
gunicorn = "21.2.0"
django-cors-headers = "4.3.1"

[tool.ruff]
target-version = "py312"
line-length = 150

select = [
    "F", # Pyflakes
    "W", # Warning
    "E", # pycodestyle
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "TD", # flake8-todos
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # Perflint
    "RUF", # Ruff
    "ANN", # light mypy
    "DJ", # Django
]
ignore = [
    "COM812",
    "ISC001",
    "ANN201",
    "A003",
    "RUF012",
    "DJ001",
    "RET503",
    "ANN101",
    "INP001",
    "ANN001",
    "ANN204",
    "EM101",
    "TRY003",
    "TRY201",
    "G004",
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "pypackages",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
